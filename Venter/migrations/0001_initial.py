<<<<<<< HEAD
# Generated by Django 2.1.2 on 2019-01-17 13:59
=======
# Generated by Django 2.1.2 on 2019-01-15 09:55
>>>>>>> a842bc7996fce7d380aa89c79ce0ed51cda654f4

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
<<<<<<< HEAD
                ('category', models.CharField(max_length=200)),
=======
                ('category', models.CharField(blank=True, max_length=200)),
>>>>>>> a842bc7996fce7d380aa89c79ce0ed51cda654f4
            ],
            options={
                'verbose_name_plural': 'Category',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
<<<<<<< HEAD
                ('csv_file', models.FileField(upload_to='Organisation/CSV File/%Y/%m/%d/')),
                ('uploaded_date', models.DateTimeField(default=datetime.datetime.now)),
                ('file_size', models.IntegerField()),
                ('file_name', models.CharField(max_length=200)),
=======
                ('csv_file', models.FileField(blank=True, null=True, upload_to='Organisation/CSV File/%Y/%m/%d/')),
                ('uploaded_date', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('file_size', models.IntegerField(blank=True, null=True)),
                ('file_name', models.CharField(blank=True, max_length=200)),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
>>>>>>> a842bc7996fce7d380aa89c79ce0ed51cda654f4
            ],
            options={
                'verbose_name_plural': 'CSV File Meta Information',
            },
        ),
        migrations.CreateModel(
            name='Header',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('header', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Headers',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
<<<<<<< HEAD
                ('organisation_name', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('organisation_logo', models.ImageField(blank=True, null=True, upload_to='Organisation/Organisation Logo/%Y/%m/%d/', verbose_name='Organisation Logo')),
                ('additional_details', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='Organisation/Employee Profile Picture/%Y/%m/%d/', verbose_name='Employee Profile picture')),
                ('phone_number', models.CharField(blank=True, max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('organisation_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Venter.Organisation')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
=======
                ('organisation_name', models.CharField(blank=True, default='CIVIS', max_length=200, primary_key=True, serialize=False)),
                ('organisation_logo', models.ImageField(blank=True, null=True, upload_to='Organisation/Organisation Logo/%Y/%m/%d/', verbose_name='Organisation Logo')),
                ('phone_number', models.CharField(blank=True, max_length=10)),
                ('additional_details', models.TextField(blank=True)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
>>>>>>> a842bc7996fce7d380aa89c79ce0ed51cda654f4
            ],
        ),
        migrations.AddField(
            model_name='header',
            name='organisation_name',
<<<<<<< HEAD
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Venter.Organisation'),
        ),
        migrations.AddField(
            model_name='file',
            name='uploaded_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
=======
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Venter.Profile'),
>>>>>>> a842bc7996fce7d380aa89c79ce0ed51cda654f4
        ),
        migrations.AddField(
            model_name='category',
            name='organisation_name',
<<<<<<< HEAD
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Venter.Organisation'),
=======
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Venter.Profile'),
>>>>>>> a842bc7996fce7d380aa89c79ce0ed51cda654f4
        ),
    ]
